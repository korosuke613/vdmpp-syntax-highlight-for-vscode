{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "VDM++",
	"patterns": [
		{
			"include": "#class-declator"
		},
		{
			"include": "#statement"
		}
	],
	"repository": {
		"statement": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#modifier"
				},
				{
					"include": "#definitions"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#types"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#number"
				},
				{
					"include": "#method-name"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#variable-name"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line.double-dash.vdmpp",
					"match": "--.*"
				}
			]
		},
		"definitions": {
			"patterns": [
				{
					"name": "entity.name.section.vdmpp",
					"match": "\\b(operations|functions|types|values|instance variables)\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.vdmpp",
					"match": "\\b(if|else|then|return)\\b"
				}
			]
		},
		"method-name": {
			"name": "meta.use-method.vdmpp",
			"begin": "(\\S+)\\(",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.vdmpp"
				}
			},
			"patterns": [
				{
					"include": "#variable-name"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.vdmpp",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.vdmpp",
					"match": "\\\\."
				}
			]
		},
		"modifier": {
			"patterns": [
				{
					"name": "storage.modifier.vdmpp",
					"match": "\\b(public|private|static)\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "support.type.primitive.vdmpp",
					"match": "\\b(int|nat|seq of char)\\b"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"name": "keyword.operator",
					"match": "\\b(\\+|-|\\*|\\/|mod)\\b"
				}
			]
		},
		"variable-name": {
			"patterns": [
				{
					"name": "variable.other.readwrite.vdmpp",
					"match": "([^:()\\s=>])"
				}
			]
		},
		"class-declator": {
			"name": "meta.class.vdmpp",
			"begin": "(class)\\s+(\\S+)",
			"end": "(end)\\s+(\\S+)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.vdmpp"
				},
				"2": {
					"name": "entity.name.class.vdmpp"
				}
			},
			"endCaptures": {
				"1": {
					"name": "storage.type.vdmpp"
				},
				"2": {
					"name": "entity.name.class.vdmpp"
				}
			},
			"patterns": [
				{
					"include": "#function-declator"
				},
				{
					"include": "#value-declator"
				},
				{
					"include": "#statement"
				}
			]
		},
		"value-declator": {
			"name": "meta.value.vdmpp",
			"begin": "(public|private)\\s+(static)\\s+(\\S+)\\s+:\\s+(\\S+)",
			"end": ";",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#modifier"
						}
					]
				},
				"2": {
					"patterns": [
						{
							"include": "#modifier"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"include": "#variable-name"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"include": "#types"
						},
						{
							"name": "support.type.primitive.vdmpp",
							"match": "\\S+"
						}
					]
				}
			},
			"endCaptures": {
				"1": {
					"name": "storage.type.vdmpp"
				},
				"2": {
					"name": "entity.name.class.vdmpp"
				}
			},
			"patterns": [
				{
					"include": "#function-declator"
				},
				{
					"include": "#statement"
				}
			]
		},
		"function-declator": {
			"name": "meta.function.vdmpp",
			"begin": "(public|private)\\s+(\\S+)\\s+:\\s+(\\S+)\\s+(==>|->)\\s+(seq of char|\\S+)",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#modifier"
						}
					]
				},
				"2": {
					"name": "entity.name.function"
				},
				"3": {
					"patterns": [
						{
							"include": "#types"
						},
						{
							"name": "support.type.primitive.vdmpp",
							"match": "\\S+"
						}
					]
				},
				"4": {
					"name": "storage.type.function.arrow.js"
				},
				"5": {
					"patterns": [
						{
							"include": "#types"
						},
						{
							"name": "support.type.primitive.vdmpp",
							"match": "\\S+"
						}
					]
				}
			},
			"end": ";",
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"number": {
			"name": "constant.numeric.number",
			"patterns": [
				{
					"include": "#number-float"
				},
				{
					"include": "#number-dec"
				},
				{
					"include": "#number-hex"
				},
				{
					"include": "#number-oct"
				},
				{
					"include": "#number-bin"
				},
				{
					"include": "#number-long"
				},
				{
					"name": "invalid.illegal.name.number",
					"match": "\\b[0-9]+\\w+"
				}
			]
		},
		"number-float": {
			"name": "constant.numeric.float.number",
			"match": "(?x)\n  (?<! \\w)(?:\n    (?:\n      \\.[0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\. [0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\.\n    ) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\n    |\n    [0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\n  )([jJ])?\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.number"
				}
			}
		},
		"number-dec": {
			"name": "constant.numeric.dec.number",
			"match": "(?x)\n  (?<![\\w\\.])(?:\n      [1-9](?: _?[0-9] )*\n      |\n      0+\n      |\n      [0-9](?: _?[0-9] )* ([jJ])\n      |\n      0 ([0-9]+)(?![eE\\.])\n  )\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.number"
				},
				"2": {
					"name": "invalid.illegal.dec.number"
				},
				"3": {
					"name": "invalid.illegal.dec.number"
				}
			}
		},
		"number-hex": {
			"name": "constant.numeric.hex.number",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[xX]) (_?[0-9a-fA-F])+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.number"
				}
			}
		},
		"number-oct": {
			"name": "constant.numeric.oct.number",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[oO]) (_?[0-7])+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.number"
				}
			}
		},
		"number-bin": {
			"name": "constant.numeric.bin.number",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[bB]) (_?[01])+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.number"
				}
			}
		},
		"number-long": {
			"name": "constant.numeric.bin.number",
			"comment": "this is to support number2 syntax for long ints",
			"match": "(?x)\n  (?<![\\w\\.])\n    ([1-9][0-9]* | 0) ([lL])\n  \\b\n",
			"captures": {
				"2": {
					"name": "storage.type.number.number"
				}
			}
		}
	},
	"scopeName": "source.vdmpp"
}